/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var script_pb = require('./script_pb.js');
goog.object.extend(proto, script_pb);
var recipient_pb = require('./recipient_pb.js');
goog.object.extend(proto, recipient_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.Amount', null, global);
goog.exportSymbol('proto.AssetAmount', null, global);
goog.exportSymbol('proto.AssetId', null, global);
goog.exportSymbol('proto.BurnTransactionData', null, global);
goog.exportSymbol('proto.CreateAliasTransactionData', null, global);
goog.exportSymbol('proto.DataTransactionData', null, global);
goog.exportSymbol('proto.DataTransactionData.DataEntry', null, global);
goog.exportSymbol('proto.ExchangeTransactionData', null, global);
goog.exportSymbol('proto.ExchangeTransactionData.BuySellOrders', null, global);
goog.exportSymbol('proto.ExchangeTransactionData.MakerTakerOrders', null, global);
goog.exportSymbol('proto.ExchangeTransactionData.Order', null, global);
goog.exportSymbol('proto.ExchangeTransactionData.Order.AssetPair', null, global);
goog.exportSymbol('proto.ExchangeTransactionData.Order.Side', null, global);
goog.exportSymbol('proto.GenesisTransactionData', null, global);
goog.exportSymbol('proto.InvokeScriptResult', null, global);
goog.exportSymbol('proto.InvokeScriptResult.Payment', null, global);
goog.exportSymbol('proto.InvokeScriptTransactionData', null, global);
goog.exportSymbol('proto.IssueTransactionData', null, global);
goog.exportSymbol('proto.LeaseCancelTransactionData', null, global);
goog.exportSymbol('proto.LeaseTransactionData', null, global);
goog.exportSymbol('proto.MassTransferTransactionData', null, global);
goog.exportSymbol('proto.MassTransferTransactionData.Transfer', null, global);
goog.exportSymbol('proto.PaymentTransactionData', null, global);
goog.exportSymbol('proto.ReissueTransactionData', null, global);
goog.exportSymbol('proto.SetAssetScriptTransactionData', null, global);
goog.exportSymbol('proto.SetScriptTransactionData', null, global);
goog.exportSymbol('proto.SignedTransaction', null, global);
goog.exportSymbol('proto.SponsorFeeTransactionData', null, global);
goog.exportSymbol('proto.Transaction', null, global);
goog.exportSymbol('proto.TransferTransactionData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AssetId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AssetId.oneofGroups_);
};
goog.inherits(proto.AssetId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AssetId.displayName = 'proto.AssetId';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AssetId.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.AssetId.AssetCase = {
  ASSET_NOT_SET: 0,
  WAVES: 1,
  ISSUED_ASSET: 2
};

/**
 * @return {proto.AssetId.AssetCase}
 */
proto.AssetId.prototype.getAssetCase = function() {
  return /** @type {proto.AssetId.AssetCase} */(jspb.Message.computeOneofCase(this, proto.AssetId.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AssetId.prototype.toObject = function(opt_includeInstance) {
  return proto.AssetId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AssetId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssetId.toObject = function(includeInstance, msg) {
  var f, obj = {
    waves: (f = msg.getWaves()) && google_protobuf_empty_pb.Empty.toObject(includeInstance, f),
    issuedAsset: msg.getIssuedAsset_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AssetId}
 */
proto.AssetId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AssetId;
  return proto.AssetId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AssetId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AssetId}
 */
proto.AssetId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_empty_pb.Empty;
      reader.readMessage(value,google_protobuf_empty_pb.Empty.deserializeBinaryFromReader);
      msg.setWaves(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIssuedAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AssetId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AssetId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AssetId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssetId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaves();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_empty_pb.Empty.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Empty waves = 1;
 * @return {?proto.google.protobuf.Empty}
 */
proto.AssetId.prototype.getWaves = function() {
  return /** @type{?proto.google.protobuf.Empty} */ (
    jspb.Message.getWrapperField(this, google_protobuf_empty_pb.Empty, 1));
};


/** @param {?proto.google.protobuf.Empty|undefined} value */
proto.AssetId.prototype.setWaves = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.AssetId.oneofGroups_[0], value);
};


proto.AssetId.prototype.clearWaves = function() {
  this.setWaves(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AssetId.prototype.hasWaves = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes issued_asset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AssetId.prototype.getIssuedAsset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes issued_asset = 2;
 * This is a type-conversion wrapper around `getIssuedAsset()`
 * @return {string}
 */
proto.AssetId.prototype.getIssuedAsset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIssuedAsset()));
};


/**
 * optional bytes issued_asset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIssuedAsset()`
 * @return {!Uint8Array}
 */
proto.AssetId.prototype.getIssuedAsset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIssuedAsset()));
};


/** @param {!(string|Uint8Array)} value */
proto.AssetId.prototype.setIssuedAsset = function(value) {
  jspb.Message.setOneofField(this, 2, proto.AssetId.oneofGroups_[0], value);
};


proto.AssetId.prototype.clearIssuedAsset = function() {
  jspb.Message.setOneofField(this, 2, proto.AssetId.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AssetId.prototype.hasIssuedAsset = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AssetAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AssetAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AssetAmount.displayName = 'proto.AssetAmount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AssetAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.AssetAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AssetAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssetAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AssetAmount}
 */
proto.AssetAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AssetAmount;
  return proto.AssetAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AssetAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AssetAmount}
 */
proto.AssetAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AssetAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AssetAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AssetAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssetAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AssetAmount.prototype.getAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.AssetAmount.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.AssetAmount.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.AssetAmount.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.AssetAmount.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AssetAmount.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Amount.displayName = 'proto.Amount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: (f = msg.getAssetId()) && proto.AssetId.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Amount}
 */
proto.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Amount;
  return proto.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Amount}
 */
proto.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AssetId;
      reader.readMessage(value,proto.AssetId.deserializeBinaryFromReader);
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AssetId.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional AssetId asset_id = 1;
 * @return {?proto.AssetId}
 */
proto.Amount.prototype.getAssetId = function() {
  return /** @type{?proto.AssetId} */ (
    jspb.Message.getWrapperField(this, proto.AssetId, 1));
};


/** @param {?proto.AssetId|undefined} value */
proto.Amount.prototype.setAssetId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Amount.prototype.clearAssetId = function() {
  this.setAssetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Amount.prototype.hasAssetId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.Amount.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Amount.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SignedTransaction.repeatedFields_, null);
};
goog.inherits(proto.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SignedTransaction.displayName = 'proto.SignedTransaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SignedTransaction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.Transaction.toObject(includeInstance, f),
    proofsList: msg.getProofsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignedTransaction}
 */
proto.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignedTransaction;
  return proto.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignedTransaction}
 */
proto.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Transaction;
      reader.readMessage(value,proto.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.Transaction}
 */
proto.SignedTransaction.prototype.getTransaction = function() {
  return /** @type{?proto.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.Transaction, 1));
};


/** @param {?proto.Transaction|undefined} value */
proto.SignedTransaction.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SignedTransaction.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignedTransaction.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes proofs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.SignedTransaction.prototype.getProofsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes proofs = 2;
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<string>}
 */
proto.SignedTransaction.prototype.getProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofsList()));
};


/**
 * repeated bytes proofs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.SignedTransaction.prototype.getProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.SignedTransaction.prototype.setProofsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.SignedTransaction.prototype.addProofs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SignedTransaction.prototype.clearProofsList = function() {
  this.setProofsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Transaction.oneofGroups_);
};
goog.inherits(proto.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transaction.displayName = 'proto.Transaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Transaction.oneofGroups_ = [[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]];

/**
 * @enum {number}
 */
proto.Transaction.DataCase = {
  DATA_NOT_SET: 0,
  GENESIS: 101,
  PAYMENT: 102,
  ISSUE: 103,
  TRANSFER: 104,
  REISSUE: 105,
  BURN: 106,
  EXCHANGE: 107,
  LEASE: 108,
  LEASE_CANCEL: 109,
  CREATE_ALIAS: 110,
  MASS_TRANSFER: 111,
  DATA_TRANSACTION: 112,
  SET_SCRIPT: 113,
  SPONSOR_FEE: 114,
  SET_ASSET_SCRIPT: 115,
  INVOKE_SCRIPT: 116
};

/**
 * @return {proto.Transaction.DataCase}
 */
proto.Transaction.prototype.getDataCase = function() {
  return /** @type {proto.Transaction.DataCase} */(jspb.Message.computeOneofCase(this, proto.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    fee: (f = msg.getFee()) && proto.Amount.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0),
    genesis: (f = msg.getGenesis()) && proto.GenesisTransactionData.toObject(includeInstance, f),
    payment: (f = msg.getPayment()) && proto.PaymentTransactionData.toObject(includeInstance, f),
    issue: (f = msg.getIssue()) && proto.IssueTransactionData.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.TransferTransactionData.toObject(includeInstance, f),
    reissue: (f = msg.getReissue()) && proto.ReissueTransactionData.toObject(includeInstance, f),
    burn: (f = msg.getBurn()) && proto.BurnTransactionData.toObject(includeInstance, f),
    exchange: (f = msg.getExchange()) && proto.ExchangeTransactionData.toObject(includeInstance, f),
    lease: (f = msg.getLease()) && proto.LeaseTransactionData.toObject(includeInstance, f),
    leaseCancel: (f = msg.getLeaseCancel()) && proto.LeaseCancelTransactionData.toObject(includeInstance, f),
    createAlias: (f = msg.getCreateAlias()) && proto.CreateAliasTransactionData.toObject(includeInstance, f),
    massTransfer: (f = msg.getMassTransfer()) && proto.MassTransferTransactionData.toObject(includeInstance, f),
    dataTransaction: (f = msg.getDataTransaction()) && proto.DataTransactionData.toObject(includeInstance, f),
    setScript: (f = msg.getSetScript()) && proto.SetScriptTransactionData.toObject(includeInstance, f),
    sponsorFee: (f = msg.getSponsorFee()) && proto.SponsorFeeTransactionData.toObject(includeInstance, f),
    setAssetScript: (f = msg.getSetAssetScript()) && proto.SetAssetScriptTransactionData.toObject(includeInstance, f),
    invokeScript: (f = msg.getInvokeScript()) && proto.InvokeScriptTransactionData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction}
 */
proto.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction;
  return proto.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction}
 */
proto.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = new proto.Amount;
      reader.readMessage(value,proto.Amount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 101:
      var value = new proto.GenesisTransactionData;
      reader.readMessage(value,proto.GenesisTransactionData.deserializeBinaryFromReader);
      msg.setGenesis(value);
      break;
    case 102:
      var value = new proto.PaymentTransactionData;
      reader.readMessage(value,proto.PaymentTransactionData.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 103:
      var value = new proto.IssueTransactionData;
      reader.readMessage(value,proto.IssueTransactionData.deserializeBinaryFromReader);
      msg.setIssue(value);
      break;
    case 104:
      var value = new proto.TransferTransactionData;
      reader.readMessage(value,proto.TransferTransactionData.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 105:
      var value = new proto.ReissueTransactionData;
      reader.readMessage(value,proto.ReissueTransactionData.deserializeBinaryFromReader);
      msg.setReissue(value);
      break;
    case 106:
      var value = new proto.BurnTransactionData;
      reader.readMessage(value,proto.BurnTransactionData.deserializeBinaryFromReader);
      msg.setBurn(value);
      break;
    case 107:
      var value = new proto.ExchangeTransactionData;
      reader.readMessage(value,proto.ExchangeTransactionData.deserializeBinaryFromReader);
      msg.setExchange(value);
      break;
    case 108:
      var value = new proto.LeaseTransactionData;
      reader.readMessage(value,proto.LeaseTransactionData.deserializeBinaryFromReader);
      msg.setLease(value);
      break;
    case 109:
      var value = new proto.LeaseCancelTransactionData;
      reader.readMessage(value,proto.LeaseCancelTransactionData.deserializeBinaryFromReader);
      msg.setLeaseCancel(value);
      break;
    case 110:
      var value = new proto.CreateAliasTransactionData;
      reader.readMessage(value,proto.CreateAliasTransactionData.deserializeBinaryFromReader);
      msg.setCreateAlias(value);
      break;
    case 111:
      var value = new proto.MassTransferTransactionData;
      reader.readMessage(value,proto.MassTransferTransactionData.deserializeBinaryFromReader);
      msg.setMassTransfer(value);
      break;
    case 112:
      var value = new proto.DataTransactionData;
      reader.readMessage(value,proto.DataTransactionData.deserializeBinaryFromReader);
      msg.setDataTransaction(value);
      break;
    case 113:
      var value = new proto.SetScriptTransactionData;
      reader.readMessage(value,proto.SetScriptTransactionData.deserializeBinaryFromReader);
      msg.setSetScript(value);
      break;
    case 114:
      var value = new proto.SponsorFeeTransactionData;
      reader.readMessage(value,proto.SponsorFeeTransactionData.deserializeBinaryFromReader);
      msg.setSponsorFee(value);
      break;
    case 115:
      var value = new proto.SetAssetScriptTransactionData;
      reader.readMessage(value,proto.SetAssetScriptTransactionData.deserializeBinaryFromReader);
      msg.setSetAssetScript(value);
      break;
    case 116:
      var value = new proto.InvokeScriptTransactionData;
      reader.readMessage(value,proto.InvokeScriptTransactionData.deserializeBinaryFromReader);
      msg.setInvokeScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Amount.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGenesis();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.GenesisTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.PaymentTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getIssue();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.IssueTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.TransferTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getReissue();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.ReissueTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getBurn();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.BurnTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getExchange();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.ExchangeTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getLease();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      proto.LeaseTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getLeaseCancel();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      proto.LeaseCancelTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getCreateAlias();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.CreateAliasTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getMassTransfer();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.MassTransferTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getDataTransaction();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.DataTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getSetScript();
  if (f != null) {
    writer.writeMessage(
      113,
      f,
      proto.SetScriptTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getSponsorFee();
  if (f != null) {
    writer.writeMessage(
      114,
      f,
      proto.SponsorFeeTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getSetAssetScript();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      proto.SetAssetScriptTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getInvokeScript();
  if (f != null) {
    writer.writeMessage(
      116,
      f,
      proto.InvokeScriptTransactionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.Transaction.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Transaction.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes sender_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getSenderPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_public_key = 2;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.Transaction.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Transaction.prototype.setSenderPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Amount fee = 3;
 * @return {?proto.Amount}
 */
proto.Transaction.prototype.getFee = function() {
  return /** @type{?proto.Amount} */ (
    jspb.Message.getWrapperField(this, proto.Amount, 3));
};


/** @param {?proto.Amount|undefined} value */
proto.Transaction.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Transaction.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasFee = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.Transaction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Transaction.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 version = 5;
 * @return {number}
 */
proto.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Transaction.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional GenesisTransactionData genesis = 101;
 * @return {?proto.GenesisTransactionData}
 */
proto.Transaction.prototype.getGenesis = function() {
  return /** @type{?proto.GenesisTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.GenesisTransactionData, 101));
};


/** @param {?proto.GenesisTransactionData|undefined} value */
proto.Transaction.prototype.setGenesis = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearGenesis = function() {
  this.setGenesis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasGenesis = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional PaymentTransactionData payment = 102;
 * @return {?proto.PaymentTransactionData}
 */
proto.Transaction.prototype.getPayment = function() {
  return /** @type{?proto.PaymentTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.PaymentTransactionData, 102));
};


/** @param {?proto.PaymentTransactionData|undefined} value */
proto.Transaction.prototype.setPayment = function(value) {
  jspb.Message.setOneofWrapperField(this, 102, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional IssueTransactionData issue = 103;
 * @return {?proto.IssueTransactionData}
 */
proto.Transaction.prototype.getIssue = function() {
  return /** @type{?proto.IssueTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.IssueTransactionData, 103));
};


/** @param {?proto.IssueTransactionData|undefined} value */
proto.Transaction.prototype.setIssue = function(value) {
  jspb.Message.setOneofWrapperField(this, 103, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearIssue = function() {
  this.setIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasIssue = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional TransferTransactionData transfer = 104;
 * @return {?proto.TransferTransactionData}
 */
proto.Transaction.prototype.getTransfer = function() {
  return /** @type{?proto.TransferTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.TransferTransactionData, 104));
};


/** @param {?proto.TransferTransactionData|undefined} value */
proto.Transaction.prototype.setTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 104, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearTransfer = function() {
  this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional ReissueTransactionData reissue = 105;
 * @return {?proto.ReissueTransactionData}
 */
proto.Transaction.prototype.getReissue = function() {
  return /** @type{?proto.ReissueTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.ReissueTransactionData, 105));
};


/** @param {?proto.ReissueTransactionData|undefined} value */
proto.Transaction.prototype.setReissue = function(value) {
  jspb.Message.setOneofWrapperField(this, 105, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearReissue = function() {
  this.setReissue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasReissue = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional BurnTransactionData burn = 106;
 * @return {?proto.BurnTransactionData}
 */
proto.Transaction.prototype.getBurn = function() {
  return /** @type{?proto.BurnTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.BurnTransactionData, 106));
};


/** @param {?proto.BurnTransactionData|undefined} value */
proto.Transaction.prototype.setBurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 106, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearBurn = function() {
  this.setBurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasBurn = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional ExchangeTransactionData exchange = 107;
 * @return {?proto.ExchangeTransactionData}
 */
proto.Transaction.prototype.getExchange = function() {
  return /** @type{?proto.ExchangeTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeTransactionData, 107));
};


/** @param {?proto.ExchangeTransactionData|undefined} value */
proto.Transaction.prototype.setExchange = function(value) {
  jspb.Message.setOneofWrapperField(this, 107, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearExchange = function() {
  this.setExchange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasExchange = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional LeaseTransactionData lease = 108;
 * @return {?proto.LeaseTransactionData}
 */
proto.Transaction.prototype.getLease = function() {
  return /** @type{?proto.LeaseTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.LeaseTransactionData, 108));
};


/** @param {?proto.LeaseTransactionData|undefined} value */
proto.Transaction.prototype.setLease = function(value) {
  jspb.Message.setOneofWrapperField(this, 108, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearLease = function() {
  this.setLease(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasLease = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional LeaseCancelTransactionData lease_cancel = 109;
 * @return {?proto.LeaseCancelTransactionData}
 */
proto.Transaction.prototype.getLeaseCancel = function() {
  return /** @type{?proto.LeaseCancelTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.LeaseCancelTransactionData, 109));
};


/** @param {?proto.LeaseCancelTransactionData|undefined} value */
proto.Transaction.prototype.setLeaseCancel = function(value) {
  jspb.Message.setOneofWrapperField(this, 109, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearLeaseCancel = function() {
  this.setLeaseCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasLeaseCancel = function() {
  return jspb.Message.getField(this, 109) != null;
};


/**
 * optional CreateAliasTransactionData create_alias = 110;
 * @return {?proto.CreateAliasTransactionData}
 */
proto.Transaction.prototype.getCreateAlias = function() {
  return /** @type{?proto.CreateAliasTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.CreateAliasTransactionData, 110));
};


/** @param {?proto.CreateAliasTransactionData|undefined} value */
proto.Transaction.prototype.setCreateAlias = function(value) {
  jspb.Message.setOneofWrapperField(this, 110, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearCreateAlias = function() {
  this.setCreateAlias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasCreateAlias = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional MassTransferTransactionData mass_transfer = 111;
 * @return {?proto.MassTransferTransactionData}
 */
proto.Transaction.prototype.getMassTransfer = function() {
  return /** @type{?proto.MassTransferTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.MassTransferTransactionData, 111));
};


/** @param {?proto.MassTransferTransactionData|undefined} value */
proto.Transaction.prototype.setMassTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 111, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearMassTransfer = function() {
  this.setMassTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasMassTransfer = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional DataTransactionData data_transaction = 112;
 * @return {?proto.DataTransactionData}
 */
proto.Transaction.prototype.getDataTransaction = function() {
  return /** @type{?proto.DataTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.DataTransactionData, 112));
};


/** @param {?proto.DataTransactionData|undefined} value */
proto.Transaction.prototype.setDataTransaction = function(value) {
  jspb.Message.setOneofWrapperField(this, 112, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearDataTransaction = function() {
  this.setDataTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasDataTransaction = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional SetScriptTransactionData set_script = 113;
 * @return {?proto.SetScriptTransactionData}
 */
proto.Transaction.prototype.getSetScript = function() {
  return /** @type{?proto.SetScriptTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.SetScriptTransactionData, 113));
};


/** @param {?proto.SetScriptTransactionData|undefined} value */
proto.Transaction.prototype.setSetScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 113, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearSetScript = function() {
  this.setSetScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasSetScript = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional SponsorFeeTransactionData sponsor_fee = 114;
 * @return {?proto.SponsorFeeTransactionData}
 */
proto.Transaction.prototype.getSponsorFee = function() {
  return /** @type{?proto.SponsorFeeTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.SponsorFeeTransactionData, 114));
};


/** @param {?proto.SponsorFeeTransactionData|undefined} value */
proto.Transaction.prototype.setSponsorFee = function(value) {
  jspb.Message.setOneofWrapperField(this, 114, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearSponsorFee = function() {
  this.setSponsorFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasSponsorFee = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional SetAssetScriptTransactionData set_asset_script = 115;
 * @return {?proto.SetAssetScriptTransactionData}
 */
proto.Transaction.prototype.getSetAssetScript = function() {
  return /** @type{?proto.SetAssetScriptTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.SetAssetScriptTransactionData, 115));
};


/** @param {?proto.SetAssetScriptTransactionData|undefined} value */
proto.Transaction.prototype.setSetAssetScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 115, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearSetAssetScript = function() {
  this.setSetAssetScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasSetAssetScript = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * optional InvokeScriptTransactionData invoke_script = 116;
 * @return {?proto.InvokeScriptTransactionData}
 */
proto.Transaction.prototype.getInvokeScript = function() {
  return /** @type{?proto.InvokeScriptTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.InvokeScriptTransactionData, 116));
};


/** @param {?proto.InvokeScriptTransactionData|undefined} value */
proto.Transaction.prototype.setInvokeScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 116, proto.Transaction.oneofGroups_[0], value);
};


proto.Transaction.prototype.clearInvokeScript = function() {
  this.setInvokeScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasInvokeScript = function() {
  return jspb.Message.getField(this, 116) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GenesisTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GenesisTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GenesisTransactionData.displayName = 'proto.GenesisTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GenesisTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.GenesisTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GenesisTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GenesisTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientAddress: msg.getRecipientAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GenesisTransactionData}
 */
proto.GenesisTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GenesisTransactionData;
  return proto.GenesisTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GenesisTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GenesisTransactionData}
 */
proto.GenesisTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipientAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GenesisTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GenesisTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GenesisTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GenesisTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes recipient_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GenesisTransactionData.prototype.getRecipientAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes recipient_address = 1;
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {string}
 */
proto.GenesisTransactionData.prototype.getRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipientAddress()));
};


/**
 * optional bytes recipient_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.GenesisTransactionData.prototype.getRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipientAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.GenesisTransactionData.prototype.setRecipientAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.GenesisTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GenesisTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PaymentTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PaymentTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PaymentTransactionData.displayName = 'proto.PaymentTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PaymentTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.PaymentTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PaymentTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaymentTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientAddress: msg.getRecipientAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PaymentTransactionData}
 */
proto.PaymentTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PaymentTransactionData;
  return proto.PaymentTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PaymentTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PaymentTransactionData}
 */
proto.PaymentTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipientAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PaymentTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PaymentTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PaymentTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaymentTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes recipient_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.PaymentTransactionData.prototype.getRecipientAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes recipient_address = 1;
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {string}
 */
proto.PaymentTransactionData.prototype.getRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipientAddress()));
};


/**
 * optional bytes recipient_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.PaymentTransactionData.prototype.getRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipientAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.PaymentTransactionData.prototype.setRecipientAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.PaymentTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PaymentTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransferTransactionData.displayName = 'proto.TransferTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && proto.Amount.toObject(includeInstance, f),
    attachment: msg.getAttachment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferTransactionData}
 */
proto.TransferTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferTransactionData;
  return proto.TransferTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferTransactionData}
 */
proto.TransferTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = new proto.Amount;
      reader.readMessage(value,proto.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAttachment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional Recipient recipient = 1;
 * @return {?proto.Recipient}
 */
proto.TransferTransactionData.prototype.getRecipient = function() {
  return /** @type{?proto.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.Recipient|undefined} value */
proto.TransferTransactionData.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransferTransactionData.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransferTransactionData.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount amount = 2;
 * @return {?proto.Amount}
 */
proto.TransferTransactionData.prototype.getAmount = function() {
  return /** @type{?proto.Amount} */ (
    jspb.Message.getWrapperField(this, proto.Amount, 2));
};


/** @param {?proto.Amount|undefined} value */
proto.TransferTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransferTransactionData.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransferTransactionData.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attachment = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TransferTransactionData.prototype.getAttachment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes attachment = 3;
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {string}
 */
proto.TransferTransactionData.prototype.getAttachment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachment()));
};


/**
 * optional bytes attachment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {!Uint8Array}
 */
proto.TransferTransactionData.prototype.getAttachment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachment()));
};


/** @param {!(string|Uint8Array)} value */
proto.TransferTransactionData.prototype.setAttachment = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateAliasTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateAliasTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateAliasTransactionData.displayName = 'proto.CreateAliasTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateAliasTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateAliasTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateAliasTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAliasTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateAliasTransactionData}
 */
proto.CreateAliasTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateAliasTransactionData;
  return proto.CreateAliasTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateAliasTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateAliasTransactionData}
 */
proto.CreateAliasTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateAliasTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateAliasTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateAliasTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAliasTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.CreateAliasTransactionData.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateAliasTransactionData.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DataTransactionData.repeatedFields_, null);
};
goog.inherits(proto.DataTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DataTransactionData.displayName = 'proto.DataTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DataTransactionData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.DataTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.DataTransactionData.DataEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataTransactionData}
 */
proto.DataTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataTransactionData;
  return proto.DataTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataTransactionData}
 */
proto.DataTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DataTransactionData.DataEntry;
      reader.readMessage(value,proto.DataTransactionData.DataEntry.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DataTransactionData.DataEntry.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataTransactionData.DataEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.DataTransactionData.DataEntry.oneofGroups_);
};
goog.inherits(proto.DataTransactionData.DataEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DataTransactionData.DataEntry.displayName = 'proto.DataTransactionData.DataEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.DataTransactionData.DataEntry.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.DataTransactionData.DataEntry.ValueCase = {
  VALUE_NOT_SET: 0,
  INT_VALUE: 10,
  BOOL_VALUE: 11,
  BINARY_VALUE: 12,
  STRING_VALUE: 13
};

/**
 * @return {proto.DataTransactionData.DataEntry.ValueCase}
 */
proto.DataTransactionData.DataEntry.prototype.getValueCase = function() {
  return /** @type {proto.DataTransactionData.DataEntry.ValueCase} */(jspb.Message.computeOneofCase(this, proto.DataTransactionData.DataEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataTransactionData.DataEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.DataTransactionData.DataEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataTransactionData.DataEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataTransactionData.DataEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 10, 0),
    boolValue: jspb.Message.getFieldWithDefault(msg, 11, false),
    binaryValue: msg.getBinaryValue_asB64(),
    stringValue: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataTransactionData.DataEntry}
 */
proto.DataTransactionData.DataEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataTransactionData.DataEntry;
  return proto.DataTransactionData.DataEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataTransactionData.DataEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataTransactionData.DataEntry}
 */
proto.DataTransactionData.DataEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryValue(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataTransactionData.DataEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataTransactionData.DataEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataTransactionData.DataEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataTransactionData.DataEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.DataTransactionData.DataEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DataTransactionData.DataEntry.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 int_value = 10;
 * @return {number}
 */
proto.DataTransactionData.DataEntry.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.DataTransactionData.DataEntry.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 10, proto.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.DataTransactionData.DataEntry.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 10, proto.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataTransactionData.DataEntry.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool bool_value = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DataTransactionData.DataEntry.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.DataTransactionData.DataEntry.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 11, proto.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.DataTransactionData.DataEntry.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 11, proto.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataTransactionData.DataEntry.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes binary_value = 12;
 * @return {!(string|Uint8Array)}
 */
proto.DataTransactionData.DataEntry.prototype.getBinaryValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes binary_value = 12;
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {string}
 */
proto.DataTransactionData.DataEntry.prototype.getBinaryValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryValue()));
};


/**
 * optional bytes binary_value = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {!Uint8Array}
 */
proto.DataTransactionData.DataEntry.prototype.getBinaryValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.DataTransactionData.DataEntry.prototype.setBinaryValue = function(value) {
  jspb.Message.setOneofField(this, 12, proto.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.DataTransactionData.DataEntry.prototype.clearBinaryValue = function() {
  jspb.Message.setOneofField(this, 12, proto.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataTransactionData.DataEntry.prototype.hasBinaryValue = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string string_value = 13;
 * @return {string}
 */
proto.DataTransactionData.DataEntry.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.DataTransactionData.DataEntry.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 13, proto.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.DataTransactionData.DataEntry.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 13, proto.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataTransactionData.DataEntry.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated DataEntry data = 1;
 * @return {!Array<!proto.DataTransactionData.DataEntry>}
 */
proto.DataTransactionData.prototype.getDataList = function() {
  return /** @type{!Array<!proto.DataTransactionData.DataEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DataTransactionData.DataEntry, 1));
};


/** @param {!Array<!proto.DataTransactionData.DataEntry>} value */
proto.DataTransactionData.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DataTransactionData.DataEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DataTransactionData.DataEntry}
 */
proto.DataTransactionData.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DataTransactionData.DataEntry, opt_index);
};


proto.DataTransactionData.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MassTransferTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MassTransferTransactionData.repeatedFields_, null);
};
goog.inherits(proto.MassTransferTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MassTransferTransactionData.displayName = 'proto.MassTransferTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MassTransferTransactionData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MassTransferTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.MassTransferTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MassTransferTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MassTransferTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: (f = msg.getAssetId()) && proto.AssetId.toObject(includeInstance, f),
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.MassTransferTransactionData.Transfer.toObject, includeInstance),
    attachment: msg.getAttachment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MassTransferTransactionData}
 */
proto.MassTransferTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MassTransferTransactionData;
  return proto.MassTransferTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MassTransferTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MassTransferTransactionData}
 */
proto.MassTransferTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AssetId;
      reader.readMessage(value,proto.AssetId.deserializeBinaryFromReader);
      msg.setAssetId(value);
      break;
    case 2:
      var value = new proto.MassTransferTransactionData.Transfer;
      reader.readMessage(value,proto.MassTransferTransactionData.Transfer.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MassTransferTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MassTransferTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MassTransferTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MassTransferTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AssetId.serializeBinaryToWriter
    );
  }
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MassTransferTransactionData.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getAttachment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MassTransferTransactionData.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MassTransferTransactionData.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MassTransferTransactionData.Transfer.displayName = 'proto.MassTransferTransactionData.Transfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MassTransferTransactionData.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.MassTransferTransactionData.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MassTransferTransactionData.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MassTransferTransactionData.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = msg.getAddress()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MassTransferTransactionData.Transfer}
 */
proto.MassTransferTransactionData.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MassTransferTransactionData.Transfer;
  return proto.MassTransferTransactionData.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MassTransferTransactionData.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MassTransferTransactionData.Transfer}
 */
proto.MassTransferTransactionData.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MassTransferTransactionData.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MassTransferTransactionData.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MassTransferTransactionData.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MassTransferTransactionData.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Recipient address = 1;
 * @return {?proto.Recipient}
 */
proto.MassTransferTransactionData.Transfer.prototype.getAddress = function() {
  return /** @type{?proto.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.Recipient|undefined} value */
proto.MassTransferTransactionData.Transfer.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MassTransferTransactionData.Transfer.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MassTransferTransactionData.Transfer.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.MassTransferTransactionData.Transfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MassTransferTransactionData.Transfer.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AssetId asset_id = 1;
 * @return {?proto.AssetId}
 */
proto.MassTransferTransactionData.prototype.getAssetId = function() {
  return /** @type{?proto.AssetId} */ (
    jspb.Message.getWrapperField(this, proto.AssetId, 1));
};


/** @param {?proto.AssetId|undefined} value */
proto.MassTransferTransactionData.prototype.setAssetId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MassTransferTransactionData.prototype.clearAssetId = function() {
  this.setAssetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MassTransferTransactionData.prototype.hasAssetId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Transfer transfers = 2;
 * @return {!Array<!proto.MassTransferTransactionData.Transfer>}
 */
proto.MassTransferTransactionData.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.MassTransferTransactionData.Transfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MassTransferTransactionData.Transfer, 2));
};


/** @param {!Array<!proto.MassTransferTransactionData.Transfer>} value */
proto.MassTransferTransactionData.prototype.setTransfersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MassTransferTransactionData.Transfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MassTransferTransactionData.Transfer}
 */
proto.MassTransferTransactionData.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MassTransferTransactionData.Transfer, opt_index);
};


proto.MassTransferTransactionData.prototype.clearTransfersList = function() {
  this.setTransfersList([]);
};


/**
 * optional bytes attachment = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MassTransferTransactionData.prototype.getAttachment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes attachment = 3;
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {string}
 */
proto.MassTransferTransactionData.prototype.getAttachment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachment()));
};


/**
 * optional bytes attachment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {!Uint8Array}
 */
proto.MassTransferTransactionData.prototype.getAttachment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachment()));
};


/** @param {!(string|Uint8Array)} value */
proto.MassTransferTransactionData.prototype.setAttachment = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LeaseTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LeaseTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LeaseTransactionData.displayName = 'proto.LeaseTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LeaseTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.LeaseTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LeaseTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LeaseTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LeaseTransactionData}
 */
proto.LeaseTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LeaseTransactionData;
  return proto.LeaseTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LeaseTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LeaseTransactionData}
 */
proto.LeaseTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LeaseTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LeaseTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LeaseTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LeaseTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Recipient recipient = 1;
 * @return {?proto.Recipient}
 */
proto.LeaseTransactionData.prototype.getRecipient = function() {
  return /** @type{?proto.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.Recipient|undefined} value */
proto.LeaseTransactionData.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LeaseTransactionData.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LeaseTransactionData.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.LeaseTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LeaseTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LeaseCancelTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LeaseCancelTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LeaseCancelTransactionData.displayName = 'proto.LeaseCancelTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LeaseCancelTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.LeaseCancelTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LeaseCancelTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LeaseCancelTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaseId: msg.getLeaseId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LeaseCancelTransactionData}
 */
proto.LeaseCancelTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LeaseCancelTransactionData;
  return proto.LeaseCancelTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LeaseCancelTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LeaseCancelTransactionData}
 */
proto.LeaseCancelTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LeaseCancelTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LeaseCancelTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LeaseCancelTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LeaseCancelTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaseId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes lease_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.LeaseCancelTransactionData.prototype.getLeaseId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes lease_id = 1;
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {string}
 */
proto.LeaseCancelTransactionData.prototype.getLeaseId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaseId()));
};


/**
 * optional bytes lease_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {!Uint8Array}
 */
proto.LeaseCancelTransactionData.prototype.getLeaseId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaseId()));
};


/** @param {!(string|Uint8Array)} value */
proto.LeaseCancelTransactionData.prototype.setLeaseId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BurnTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BurnTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BurnTransactionData.displayName = 'proto.BurnTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BurnTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.BurnTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BurnTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BurnTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetAmount: (f = msg.getAssetAmount()) && proto.AssetAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BurnTransactionData}
 */
proto.BurnTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BurnTransactionData;
  return proto.BurnTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BurnTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BurnTransactionData}
 */
proto.BurnTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AssetAmount;
      reader.readMessage(value,proto.AssetAmount.deserializeBinaryFromReader);
      msg.setAssetAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BurnTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BurnTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BurnTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BurnTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AssetAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetAmount asset_amount = 1;
 * @return {?proto.AssetAmount}
 */
proto.BurnTransactionData.prototype.getAssetAmount = function() {
  return /** @type{?proto.AssetAmount} */ (
    jspb.Message.getWrapperField(this, proto.AssetAmount, 1));
};


/** @param {?proto.AssetAmount|undefined} value */
proto.BurnTransactionData.prototype.setAssetAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BurnTransactionData.prototype.clearAssetAmount = function() {
  this.setAssetAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BurnTransactionData.prototype.hasAssetAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssueTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IssueTransactionData.displayName = 'proto.IssueTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    description: msg.getDescription_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reissuable: jspb.Message.getFieldWithDefault(msg, 5, false),
    script: (f = msg.getScript()) && script_pb.Script.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueTransactionData}
 */
proto.IssueTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueTransactionData;
  return proto.IssueTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueTransactionData}
 */
proto.IssueTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    case 6:
      var value = new script_pb.Script;
      reader.readMessage(value,script_pb.Script.deserializeBinaryFromReader);
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDescription_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getScript();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      script_pb.Script.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.IssueTransactionData.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.IssueTransactionData.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.IssueTransactionData.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {!(string|Uint8Array)} value */
proto.IssueTransactionData.prototype.setName = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes description = 2;
 * @return {!(string|Uint8Array)}
 */
proto.IssueTransactionData.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes description = 2;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.IssueTransactionData.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.IssueTransactionData.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.IssueTransactionData.prototype.setDescription = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.IssueTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IssueTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 decimals = 4;
 * @return {number}
 */
proto.IssueTransactionData.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IssueTransactionData.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool reissuable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.IssueTransactionData.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.IssueTransactionData.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional Script script = 6;
 * @return {?proto.Script}
 */
proto.IssueTransactionData.prototype.getScript = function() {
  return /** @type{?proto.Script} */ (
    jspb.Message.getWrapperField(this, script_pb.Script, 6));
};


/** @param {?proto.Script|undefined} value */
proto.IssueTransactionData.prototype.setScript = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.IssueTransactionData.prototype.clearScript = function() {
  this.setScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IssueTransactionData.prototype.hasScript = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReissueTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReissueTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReissueTransactionData.displayName = 'proto.ReissueTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReissueTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.ReissueTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReissueTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReissueTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetAmount: (f = msg.getAssetAmount()) && proto.AssetAmount.toObject(includeInstance, f),
    reissuable: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReissueTransactionData}
 */
proto.ReissueTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReissueTransactionData;
  return proto.ReissueTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReissueTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReissueTransactionData}
 */
proto.ReissueTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AssetAmount;
      reader.readMessage(value,proto.AssetAmount.deserializeBinaryFromReader);
      msg.setAssetAmount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReissueTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReissueTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReissueTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReissueTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AssetAmount.serializeBinaryToWriter
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional AssetAmount asset_amount = 1;
 * @return {?proto.AssetAmount}
 */
proto.ReissueTransactionData.prototype.getAssetAmount = function() {
  return /** @type{?proto.AssetAmount} */ (
    jspb.Message.getWrapperField(this, proto.AssetAmount, 1));
};


/** @param {?proto.AssetAmount|undefined} value */
proto.ReissueTransactionData.prototype.setAssetAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ReissueTransactionData.prototype.clearAssetAmount = function() {
  this.setAssetAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReissueTransactionData.prototype.hasAssetAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool reissuable = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ReissueTransactionData.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ReissueTransactionData.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetAssetScriptTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetAssetScriptTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetAssetScriptTransactionData.displayName = 'proto.SetAssetScriptTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetAssetScriptTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.SetAssetScriptTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetAssetScriptTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetAssetScriptTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    script: (f = msg.getScript()) && script_pb.Script.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetAssetScriptTransactionData}
 */
proto.SetAssetScriptTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetAssetScriptTransactionData;
  return proto.SetAssetScriptTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetAssetScriptTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetAssetScriptTransactionData}
 */
proto.SetAssetScriptTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = new script_pb.Script;
      reader.readMessage(value,script_pb.Script.deserializeBinaryFromReader);
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetAssetScriptTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetAssetScriptTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetAssetScriptTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetAssetScriptTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getScript();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      script_pb.Script.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.SetAssetScriptTransactionData.prototype.getAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.SetAssetScriptTransactionData.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.SetAssetScriptTransactionData.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.SetAssetScriptTransactionData.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Script script = 2;
 * @return {?proto.Script}
 */
proto.SetAssetScriptTransactionData.prototype.getScript = function() {
  return /** @type{?proto.Script} */ (
    jspb.Message.getWrapperField(this, script_pb.Script, 2));
};


/** @param {?proto.Script|undefined} value */
proto.SetAssetScriptTransactionData.prototype.setScript = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetAssetScriptTransactionData.prototype.clearScript = function() {
  this.setScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetAssetScriptTransactionData.prototype.hasScript = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetScriptTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetScriptTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetScriptTransactionData.displayName = 'proto.SetScriptTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetScriptTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.SetScriptTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetScriptTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetScriptTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    script: (f = msg.getScript()) && script_pb.Script.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetScriptTransactionData}
 */
proto.SetScriptTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetScriptTransactionData;
  return proto.SetScriptTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetScriptTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetScriptTransactionData}
 */
proto.SetScriptTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new script_pb.Script;
      reader.readMessage(value,script_pb.Script.deserializeBinaryFromReader);
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetScriptTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetScriptTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetScriptTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetScriptTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScript();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      script_pb.Script.serializeBinaryToWriter
    );
  }
};


/**
 * optional Script script = 2;
 * @return {?proto.Script}
 */
proto.SetScriptTransactionData.prototype.getScript = function() {
  return /** @type{?proto.Script} */ (
    jspb.Message.getWrapperField(this, script_pb.Script, 2));
};


/** @param {?proto.Script|undefined} value */
proto.SetScriptTransactionData.prototype.setScript = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetScriptTransactionData.prototype.clearScript = function() {
  this.setScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetScriptTransactionData.prototype.hasScript = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ExchangeTransactionData.repeatedFields_, null);
};
goog.inherits(proto.ExchangeTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExchangeTransactionData.displayName = 'proto.ExchangeTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ExchangeTransactionData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, 0),
    buyMatcherFee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sellMatcherFee: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.ExchangeTransactionData.Order.toObject, includeInstance),
    taker: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeTransactionData}
 */
proto.ExchangeTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeTransactionData;
  return proto.ExchangeTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeTransactionData}
 */
proto.ExchangeTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBuyMatcherFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSellMatcherFee(value);
      break;
    case 5:
      var value = new proto.ExchangeTransactionData.Order;
      reader.readMessage(value,proto.ExchangeTransactionData.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBuyMatcherFee();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSellMatcherFee();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ExchangeTransactionData.Order.serializeBinaryToWriter
    );
  }
  f = message.getTaker();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeTransactionData.BuySellOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExchangeTransactionData.BuySellOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExchangeTransactionData.BuySellOrders.displayName = 'proto.ExchangeTransactionData.BuySellOrders';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeTransactionData.BuySellOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeTransactionData.BuySellOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeTransactionData.BuySellOrders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.BuySellOrders.toObject = function(includeInstance, msg) {
  var f, obj = {
    buyOrder: (f = msg.getBuyOrder()) && proto.ExchangeTransactionData.Order.toObject(includeInstance, f),
    sellOrder: (f = msg.getSellOrder()) && proto.ExchangeTransactionData.Order.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeTransactionData.BuySellOrders}
 */
proto.ExchangeTransactionData.BuySellOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeTransactionData.BuySellOrders;
  return proto.ExchangeTransactionData.BuySellOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeTransactionData.BuySellOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeTransactionData.BuySellOrders}
 */
proto.ExchangeTransactionData.BuySellOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ExchangeTransactionData.Order;
      reader.readMessage(value,proto.ExchangeTransactionData.Order.deserializeBinaryFromReader);
      msg.setBuyOrder(value);
      break;
    case 2:
      var value = new proto.ExchangeTransactionData.Order;
      reader.readMessage(value,proto.ExchangeTransactionData.Order.deserializeBinaryFromReader);
      msg.setSellOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.BuySellOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeTransactionData.BuySellOrders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeTransactionData.BuySellOrders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.BuySellOrders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuyOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ExchangeTransactionData.Order.serializeBinaryToWriter
    );
  }
  f = message.getSellOrder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ExchangeTransactionData.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional Order buy_order = 1;
 * @return {?proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.BuySellOrders.prototype.getBuyOrder = function() {
  return /** @type{?proto.ExchangeTransactionData.Order} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeTransactionData.Order, 1));
};


/** @param {?proto.ExchangeTransactionData.Order|undefined} value */
proto.ExchangeTransactionData.BuySellOrders.prototype.setBuyOrder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ExchangeTransactionData.BuySellOrders.prototype.clearBuyOrder = function() {
  this.setBuyOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeTransactionData.BuySellOrders.prototype.hasBuyOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Order sell_order = 2;
 * @return {?proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.BuySellOrders.prototype.getSellOrder = function() {
  return /** @type{?proto.ExchangeTransactionData.Order} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeTransactionData.Order, 2));
};


/** @param {?proto.ExchangeTransactionData.Order|undefined} value */
proto.ExchangeTransactionData.BuySellOrders.prototype.setSellOrder = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ExchangeTransactionData.BuySellOrders.prototype.clearSellOrder = function() {
  this.setSellOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeTransactionData.BuySellOrders.prototype.hasSellOrder = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeTransactionData.MakerTakerOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExchangeTransactionData.MakerTakerOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExchangeTransactionData.MakerTakerOrders.displayName = 'proto.ExchangeTransactionData.MakerTakerOrders';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeTransactionData.MakerTakerOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeTransactionData.MakerTakerOrders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.MakerTakerOrders.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerOrder: (f = msg.getMakerOrder()) && proto.ExchangeTransactionData.Order.toObject(includeInstance, f),
    takerOrder: (f = msg.getTakerOrder()) && proto.ExchangeTransactionData.Order.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeTransactionData.MakerTakerOrders}
 */
proto.ExchangeTransactionData.MakerTakerOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeTransactionData.MakerTakerOrders;
  return proto.ExchangeTransactionData.MakerTakerOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeTransactionData.MakerTakerOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeTransactionData.MakerTakerOrders}
 */
proto.ExchangeTransactionData.MakerTakerOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ExchangeTransactionData.Order;
      reader.readMessage(value,proto.ExchangeTransactionData.Order.deserializeBinaryFromReader);
      msg.setMakerOrder(value);
      break;
    case 2:
      var value = new proto.ExchangeTransactionData.Order;
      reader.readMessage(value,proto.ExchangeTransactionData.Order.deserializeBinaryFromReader);
      msg.setTakerOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeTransactionData.MakerTakerOrders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeTransactionData.MakerTakerOrders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.MakerTakerOrders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ExchangeTransactionData.Order.serializeBinaryToWriter
    );
  }
  f = message.getTakerOrder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ExchangeTransactionData.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional Order maker_order = 1;
 * @return {?proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.getMakerOrder = function() {
  return /** @type{?proto.ExchangeTransactionData.Order} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeTransactionData.Order, 1));
};


/** @param {?proto.ExchangeTransactionData.Order|undefined} value */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.setMakerOrder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ExchangeTransactionData.MakerTakerOrders.prototype.clearMakerOrder = function() {
  this.setMakerOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.hasMakerOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Order taker_order = 2;
 * @return {?proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.getTakerOrder = function() {
  return /** @type{?proto.ExchangeTransactionData.Order} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeTransactionData.Order, 2));
};


/** @param {?proto.ExchangeTransactionData.Order|undefined} value */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.setTakerOrder = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ExchangeTransactionData.MakerTakerOrders.prototype.clearTakerOrder = function() {
  this.setTakerOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeTransactionData.MakerTakerOrders.prototype.hasTakerOrder = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeTransactionData.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ExchangeTransactionData.Order.repeatedFields_, null);
};
goog.inherits(proto.ExchangeTransactionData.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExchangeTransactionData.Order.displayName = 'proto.ExchangeTransactionData.Order';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ExchangeTransactionData.Order.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeTransactionData.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeTransactionData.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeTransactionData.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    matcherPublicKey: msg.getMatcherPublicKey_asB64(),
    assetPair: (f = msg.getAssetPair()) && proto.ExchangeTransactionData.Order.AssetPair.toObject(includeInstance, f),
    orderSide: jspb.Message.getFieldWithDefault(msg, 5, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    price: jspb.Message.getFieldWithDefault(msg, 7, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    expiration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    matcherFee: (f = msg.getMatcherFee()) && proto.Amount.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 11, 0),
    proofsList: msg.getProofsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeTransactionData.Order;
  return proto.ExchangeTransactionData.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeTransactionData.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMatcherPublicKey(value);
      break;
    case 4:
      var value = new proto.ExchangeTransactionData.Order.AssetPair;
      reader.readMessage(value,proto.ExchangeTransactionData.Order.AssetPair.deserializeBinaryFromReader);
      msg.setAssetPair(value);
      break;
    case 5:
      var value = /** @type {!proto.ExchangeTransactionData.Order.Side} */ (reader.readEnum());
      msg.setOrderSide(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiration(value);
      break;
    case 10:
      var value = new proto.Amount;
      reader.readMessage(value,proto.Amount.deserializeBinaryFromReader);
      msg.setMatcherFee(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeTransactionData.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeTransactionData.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMatcherPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAssetPair();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ExchangeTransactionData.Order.AssetPair.serializeBinaryToWriter
    );
  }
  f = message.getOrderSide();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getMatcherFee();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Amount.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ExchangeTransactionData.Order.Side = {
  BUY: 0,
  SELL: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeTransactionData.Order.AssetPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExchangeTransactionData.Order.AssetPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExchangeTransactionData.Order.AssetPair.displayName = 'proto.ExchangeTransactionData.Order.AssetPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeTransactionData.Order.AssetPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeTransactionData.Order.AssetPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.Order.AssetPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountAssetId: msg.getAmountAssetId_asB64(),
    priceAssetId: msg.getPriceAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeTransactionData.Order.AssetPair}
 */
proto.ExchangeTransactionData.Order.AssetPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeTransactionData.Order.AssetPair;
  return proto.ExchangeTransactionData.Order.AssetPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeTransactionData.Order.AssetPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeTransactionData.Order.AssetPair}
 */
proto.ExchangeTransactionData.Order.AssetPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmountAssetId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPriceAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeTransactionData.Order.AssetPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeTransactionData.Order.AssetPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeTransactionData.Order.AssetPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPriceAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes amount_asset_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.getAmountAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount_asset_id = 1;
 * This is a type-conversion wrapper around `getAmountAssetId()`
 * @return {string}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.getAmountAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmountAssetId()));
};


/**
 * optional bytes amount_asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmountAssetId()`
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.getAmountAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmountAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.ExchangeTransactionData.Order.AssetPair.prototype.setAmountAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes price_asset_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.getPriceAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes price_asset_id = 2;
 * This is a type-conversion wrapper around `getPriceAssetId()`
 * @return {string}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.getPriceAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPriceAssetId()));
};


/**
 * optional bytes price_asset_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPriceAssetId()`
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.Order.AssetPair.prototype.getPriceAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPriceAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.ExchangeTransactionData.Order.AssetPair.prototype.setPriceAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.ExchangeTransactionData.Order.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.Order.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes sender_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeTransactionData.Order.prototype.getSenderPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_public_key = 2;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.ExchangeTransactionData.Order.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.Order.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.ExchangeTransactionData.Order.prototype.setSenderPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes matcher_public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeTransactionData.Order.prototype.getMatcherPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes matcher_public_key = 3;
 * This is a type-conversion wrapper around `getMatcherPublicKey()`
 * @return {string}
 */
proto.ExchangeTransactionData.Order.prototype.getMatcherPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMatcherPublicKey()));
};


/**
 * optional bytes matcher_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMatcherPublicKey()`
 * @return {!Uint8Array}
 */
proto.ExchangeTransactionData.Order.prototype.getMatcherPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMatcherPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.ExchangeTransactionData.Order.prototype.setMatcherPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional AssetPair asset_pair = 4;
 * @return {?proto.ExchangeTransactionData.Order.AssetPair}
 */
proto.ExchangeTransactionData.Order.prototype.getAssetPair = function() {
  return /** @type{?proto.ExchangeTransactionData.Order.AssetPair} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeTransactionData.Order.AssetPair, 4));
};


/** @param {?proto.ExchangeTransactionData.Order.AssetPair|undefined} value */
proto.ExchangeTransactionData.Order.prototype.setAssetPair = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ExchangeTransactionData.Order.prototype.clearAssetPair = function() {
  this.setAssetPair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeTransactionData.Order.prototype.hasAssetPair = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Side order_side = 5;
 * @return {!proto.ExchangeTransactionData.Order.Side}
 */
proto.ExchangeTransactionData.Order.prototype.getOrderSide = function() {
  return /** @type {!proto.ExchangeTransactionData.Order.Side} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ExchangeTransactionData.Order.Side} value */
proto.ExchangeTransactionData.Order.prototype.setOrderSide = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 amount = 6;
 * @return {number}
 */
proto.ExchangeTransactionData.Order.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.Order.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 price = 7;
 * @return {number}
 */
proto.ExchangeTransactionData.Order.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.Order.prototype.setPrice = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 timestamp = 8;
 * @return {number}
 */
proto.ExchangeTransactionData.Order.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.Order.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 expiration = 9;
 * @return {number}
 */
proto.ExchangeTransactionData.Order.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.Order.prototype.setExpiration = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional Amount matcher_fee = 10;
 * @return {?proto.Amount}
 */
proto.ExchangeTransactionData.Order.prototype.getMatcherFee = function() {
  return /** @type{?proto.Amount} */ (
    jspb.Message.getWrapperField(this, proto.Amount, 10));
};


/** @param {?proto.Amount|undefined} value */
proto.ExchangeTransactionData.Order.prototype.setMatcherFee = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ExchangeTransactionData.Order.prototype.clearMatcherFee = function() {
  this.setMatcherFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeTransactionData.Order.prototype.hasMatcherFee = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 version = 11;
 * @return {number}
 */
proto.ExchangeTransactionData.Order.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.Order.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated bytes proofs = 12;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ExchangeTransactionData.Order.prototype.getProofsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * repeated bytes proofs = 12;
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<string>}
 */
proto.ExchangeTransactionData.Order.prototype.getProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofsList()));
};


/**
 * repeated bytes proofs = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ExchangeTransactionData.Order.prototype.getProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ExchangeTransactionData.Order.prototype.setProofsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ExchangeTransactionData.Order.prototype.addProofs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.ExchangeTransactionData.Order.prototype.clearProofsList = function() {
  this.setProofsList([]);
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.ExchangeTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 price = 2;
 * @return {number}
 */
proto.ExchangeTransactionData.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.prototype.setPrice = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 buy_matcher_fee = 3;
 * @return {number}
 */
proto.ExchangeTransactionData.prototype.getBuyMatcherFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.prototype.setBuyMatcherFee = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 sell_matcher_fee = 4;
 * @return {number}
 */
proto.ExchangeTransactionData.prototype.getSellMatcherFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.prototype.setSellMatcherFee = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Order orders = 5;
 * @return {!Array<!proto.ExchangeTransactionData.Order>}
 */
proto.ExchangeTransactionData.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.ExchangeTransactionData.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ExchangeTransactionData.Order, 5));
};


/** @param {!Array<!proto.ExchangeTransactionData.Order>} value */
proto.ExchangeTransactionData.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ExchangeTransactionData.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ExchangeTransactionData.Order}
 */
proto.ExchangeTransactionData.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ExchangeTransactionData.Order, opt_index);
};


proto.ExchangeTransactionData.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional int32 taker = 6;
 * @return {number}
 */
proto.ExchangeTransactionData.prototype.getTaker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ExchangeTransactionData.prototype.setTaker = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SponsorFeeTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SponsorFeeTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SponsorFeeTransactionData.displayName = 'proto.SponsorFeeTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SponsorFeeTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.SponsorFeeTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SponsorFeeTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SponsorFeeTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    minFee: (f = msg.getMinFee()) && proto.AssetAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SponsorFeeTransactionData}
 */
proto.SponsorFeeTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SponsorFeeTransactionData;
  return proto.SponsorFeeTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SponsorFeeTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SponsorFeeTransactionData}
 */
proto.SponsorFeeTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AssetAmount;
      reader.readMessage(value,proto.AssetAmount.deserializeBinaryFromReader);
      msg.setMinFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SponsorFeeTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SponsorFeeTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SponsorFeeTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SponsorFeeTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AssetAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetAmount min_fee = 1;
 * @return {?proto.AssetAmount}
 */
proto.SponsorFeeTransactionData.prototype.getMinFee = function() {
  return /** @type{?proto.AssetAmount} */ (
    jspb.Message.getWrapperField(this, proto.AssetAmount, 1));
};


/** @param {?proto.AssetAmount|undefined} value */
proto.SponsorFeeTransactionData.prototype.setMinFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SponsorFeeTransactionData.prototype.clearMinFee = function() {
  this.setMinFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SponsorFeeTransactionData.prototype.hasMinFee = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvokeScriptTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InvokeScriptTransactionData.repeatedFields_, null);
};
goog.inherits(proto.InvokeScriptTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvokeScriptTransactionData.displayName = 'proto.InvokeScriptTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InvokeScriptTransactionData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvokeScriptTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.InvokeScriptTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvokeScriptTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvokeScriptTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dappAddress: msg.getDappAddress_asB64(),
    functionCall: msg.getFunctionCall_asB64(),
    paymentsList: jspb.Message.toObjectList(msg.getPaymentsList(),
    proto.Amount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvokeScriptTransactionData}
 */
proto.InvokeScriptTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvokeScriptTransactionData;
  return proto.InvokeScriptTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvokeScriptTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvokeScriptTransactionData}
 */
proto.InvokeScriptTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDappAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFunctionCall(value);
      break;
    case 3:
      var value = new proto.Amount;
      reader.readMessage(value,proto.Amount.deserializeBinaryFromReader);
      msg.addPayments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvokeScriptTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvokeScriptTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvokeScriptTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvokeScriptTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDappAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFunctionCall_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dapp_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.InvokeScriptTransactionData.prototype.getDappAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dapp_address = 1;
 * This is a type-conversion wrapper around `getDappAddress()`
 * @return {string}
 */
proto.InvokeScriptTransactionData.prototype.getDappAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDappAddress()));
};


/**
 * optional bytes dapp_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDappAddress()`
 * @return {!Uint8Array}
 */
proto.InvokeScriptTransactionData.prototype.getDappAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDappAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.InvokeScriptTransactionData.prototype.setDappAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes function_call = 2;
 * @return {!(string|Uint8Array)}
 */
proto.InvokeScriptTransactionData.prototype.getFunctionCall = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes function_call = 2;
 * This is a type-conversion wrapper around `getFunctionCall()`
 * @return {string}
 */
proto.InvokeScriptTransactionData.prototype.getFunctionCall_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFunctionCall()));
};


/**
 * optional bytes function_call = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFunctionCall()`
 * @return {!Uint8Array}
 */
proto.InvokeScriptTransactionData.prototype.getFunctionCall_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFunctionCall()));
};


/** @param {!(string|Uint8Array)} value */
proto.InvokeScriptTransactionData.prototype.setFunctionCall = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Amount payments = 3;
 * @return {!Array<!proto.Amount>}
 */
proto.InvokeScriptTransactionData.prototype.getPaymentsList = function() {
  return /** @type{!Array<!proto.Amount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Amount, 3));
};


/** @param {!Array<!proto.Amount>} value */
proto.InvokeScriptTransactionData.prototype.setPaymentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Amount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Amount}
 */
proto.InvokeScriptTransactionData.prototype.addPayments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Amount, opt_index);
};


proto.InvokeScriptTransactionData.prototype.clearPaymentsList = function() {
  this.setPaymentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvokeScriptResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InvokeScriptResult.repeatedFields_, null);
};
goog.inherits(proto.InvokeScriptResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvokeScriptResult.displayName = 'proto.InvokeScriptResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InvokeScriptResult.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvokeScriptResult.prototype.toObject = function(opt_includeInstance) {
  return proto.InvokeScriptResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvokeScriptResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvokeScriptResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.DataTransactionData.DataEntry.toObject, includeInstance),
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.InvokeScriptResult.Payment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvokeScriptResult}
 */
proto.InvokeScriptResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvokeScriptResult;
  return proto.InvokeScriptResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvokeScriptResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvokeScriptResult}
 */
proto.InvokeScriptResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DataTransactionData.DataEntry;
      reader.readMessage(value,proto.DataTransactionData.DataEntry.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new proto.InvokeScriptResult.Payment;
      reader.readMessage(value,proto.InvokeScriptResult.Payment.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvokeScriptResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvokeScriptResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvokeScriptResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvokeScriptResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DataTransactionData.DataEntry.serializeBinaryToWriter
    );
  }
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.InvokeScriptResult.Payment.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvokeScriptResult.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvokeScriptResult.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvokeScriptResult.Payment.displayName = 'proto.InvokeScriptResult.Payment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvokeScriptResult.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.InvokeScriptResult.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvokeScriptResult.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvokeScriptResult.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    amount: (f = msg.getAmount()) && proto.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvokeScriptResult.Payment}
 */
proto.InvokeScriptResult.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvokeScriptResult.Payment;
  return proto.InvokeScriptResult.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvokeScriptResult.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvokeScriptResult.Payment}
 */
proto.InvokeScriptResult.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.Amount;
      reader.readMessage(value,proto.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvokeScriptResult.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvokeScriptResult.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvokeScriptResult.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvokeScriptResult.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.InvokeScriptResult.Payment.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.InvokeScriptResult.Payment.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.InvokeScriptResult.Payment.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.InvokeScriptResult.Payment.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Amount amount = 2;
 * @return {?proto.Amount}
 */
proto.InvokeScriptResult.Payment.prototype.getAmount = function() {
  return /** @type{?proto.Amount} */ (
    jspb.Message.getWrapperField(this, proto.Amount, 2));
};


/** @param {?proto.Amount|undefined} value */
proto.InvokeScriptResult.Payment.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.InvokeScriptResult.Payment.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InvokeScriptResult.Payment.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DataTransactionData.DataEntry data = 1;
 * @return {!Array<!proto.DataTransactionData.DataEntry>}
 */
proto.InvokeScriptResult.prototype.getDataList = function() {
  return /** @type{!Array<!proto.DataTransactionData.DataEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DataTransactionData.DataEntry, 1));
};


/** @param {!Array<!proto.DataTransactionData.DataEntry>} value */
proto.InvokeScriptResult.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DataTransactionData.DataEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DataTransactionData.DataEntry}
 */
proto.InvokeScriptResult.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DataTransactionData.DataEntry, opt_index);
};


proto.InvokeScriptResult.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * repeated Payment transfers = 2;
 * @return {!Array<!proto.InvokeScriptResult.Payment>}
 */
proto.InvokeScriptResult.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.InvokeScriptResult.Payment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InvokeScriptResult.Payment, 2));
};


/** @param {!Array<!proto.InvokeScriptResult.Payment>} value */
proto.InvokeScriptResult.prototype.setTransfersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.InvokeScriptResult.Payment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InvokeScriptResult.Payment}
 */
proto.InvokeScriptResult.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.InvokeScriptResult.Payment, opt_index);
};


proto.InvokeScriptResult.prototype.clearTransfersList = function() {
  this.setTransfersList([]);
};


goog.object.extend(exports, proto);
