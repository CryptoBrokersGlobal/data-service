// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`candles daemon sql test calculate and insert all candles from other small candles 1`] = `"insert into \\"candles\\" select to_timestamp(floor((extract('epoch' from time_start) / 300 )) * 300) as \\"candle_time\\", \\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"price_asset_uid\\" as \\"price_asset_uid\\", (select min(\\"low\\")) as \\"low\\", (select max(\\"high\\")) as \\"high\\", (select sum(\\"volume\\")) as \\"volume\\", (select sum(\\"quote_volume\\")) as \\"quote_volume\\", (select max(\\"max_height\\")) as \\"max_height\\", (select sum(\\"txs_count\\")) as \\"txs_count\\", (sum((weighted_average_price * volume)::numeric)::numeric / sum(volume)::numeric)::numeric as \\"weighted_average_price\\", (array_agg(open ORDER BY time_start)::numeric[])[1] as \\"open\\", (array_agg(close ORDER BY time_start DESC)::numeric[])[1] as \\"close\\", 300 as \\"interval_in_secs\\", \\"matcher_uid\\" as \\"matcher_uid\\" from \\"candles\\" as \\"t\\" where \\"t\\".\\"interval_in_secs\\" = 60 group by \\"candle_time\\", \\"amount_asset_uid\\", \\"price_asset_uid\\", \\"matcher_uid\\""`;

exports[`candles daemon sql test get all candles from exchange tx grouped by 1 minute and after timestamp 1`] = `"select \\"e\\".\\"candle_time\\" as \\"time_start\\", \\"amount_asset_uid\\", \\"price_asset_uid\\", min(e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"low\\", max(e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"high\\", sum(e.amount * 10 ^(-a.decimals)) as \\"volume\\", sum(e.amount * 10 ^(-a.decimals) * e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"quote_volume\\", (select max(\\"height\\")) as \\"max_height\\", count(e.price) as \\"txs_count\\", sum((e.amount * 10 ^(-a.decimals))::numeric * (e.price * 10 ^(-8 - p.decimals + a.decimals))::numeric)/sum((e.amount * 10 ^(-a.decimals))::numeric) as \\"weighted_average_price\\", (array_agg(e.price * 10 ^(-8 - p.decimals + a.decimals) ORDER BY e.candle_time)::numeric[])[1] as \\"open\\", (array_agg(e.price * 10 ^(-8 - p.decimals + a.decimals) ORDER BY e.candle_time DESC)::numeric[])[1] as \\"close\\", 60 as \\"interval_in_secs\\", \\"sender_uid\\" as \\"matcher_uid\\" from (select \\"o\\".\\"amount_asset_uid\\", \\"o\\".\\"price_asset_uid\\", \\"t\\".\\"sender_uid\\", \\"t\\".\\"height\\", date_trunc('minute', txs.time_stamp) as \\"candle_time\\", \\"t\\".\\"amount\\", \\"t\\".\\"price\\" from \\"txs_7\\" as \\"t\\" inner join \\"txs\\" as \\"txs\\" on \\"txs\\".\\"uid\\" = \\"t\\".\\"tx_uid\\" inner join \\"txs_7_orders\\" as \\"o\\" on \\"o\\".\\"order_uid\\" = \\"t\\".\\"order1_uid\\" where \\"t\\".\\"tx_uid\\" >= (select \\"uid\\" from \\"txs\\" where txs.time_stamp >= date_trunc('minute', '2019-01-01T00:00:00.000Z'::timestamp) limit 1)) as \\"e\\" inner join \\"assets\\" as \\"a\\" on \\"e\\".\\"amount_asset_uid\\" = \\"a\\".\\"uid\\" inner join \\"assets\\" as \\"p\\" on \\"e\\".\\"price_asset_uid\\" = \\"p\\".\\"uid\\" group by \\"e\\".\\"candle_time\\", \\"e\\".\\"amount_asset_uid\\", \\"e\\".\\"price_asset_uid\\", \\"e\\".\\"sender_uid\\""`;

exports[`candles daemon sql test get last candle height 1`] = `"select \\"max_height\\" from \\"candles\\" as \\"t\\" order by \\"max_height\\" desc limit 1"`;

exports[`candles daemon sql test get last exchange tx height 1`] = `"select \\"height\\" from \\"txs_7\\" as \\"t\\" order by \\"height\\" desc limit 1"`;

exports[`candles daemon sql test insert all candles group by 1 minute 1`] = `"insert into \\"candles\\" select \\"e\\".\\"candle_time\\" as \\"time_start\\", \\"amount_asset_uid\\", \\"price_asset_uid\\", min(e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"low\\", max(e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"high\\", sum(e.amount * 10 ^(-a.decimals)) as \\"volume\\", sum(e.amount * 10 ^(-a.decimals) * e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"quote_volume\\", (select max(\\"height\\")) as \\"max_height\\", count(e.price) as \\"txs_count\\", sum((e.amount * 10 ^(-a.decimals))::numeric * (e.price * 10 ^(-8 - p.decimals + a.decimals))::numeric)/sum((e.amount * 10 ^(-a.decimals))::numeric) as \\"weighted_average_price\\", (array_agg(e.price * 10 ^(-8 - p.decimals + a.decimals) ORDER BY e.candle_time)::numeric[])[1] as \\"open\\", (array_agg(e.price * 10 ^(-8 - p.decimals + a.decimals) ORDER BY e.candle_time DESC)::numeric[])[1] as \\"close\\", 60 as \\"interval_in_secs\\", \\"sender_uid\\" as \\"matcher_uid\\" from (select \\"o\\".\\"amount_asset_uid\\", \\"o\\".\\"price_asset_uid\\", \\"t\\".\\"sender_uid\\", \\"t\\".\\"height\\", date_trunc('minute', txs.time_stamp) as \\"candle_time\\", \\"t\\".\\"amount\\", \\"t\\".\\"price\\" from \\"txs_7\\" as \\"t\\" inner join \\"txs\\" as \\"txs\\" on \\"txs\\".\\"uid\\" = \\"t\\".\\"tx_uid\\" inner join \\"txs_7_orders\\" as \\"o\\" on \\"o\\".\\"order_uid\\" = \\"t\\".\\"order1_uid\\") as \\"e\\" inner join \\"assets\\" as \\"a\\" on \\"e\\".\\"amount_asset_uid\\" = \\"a\\".\\"uid\\" inner join \\"assets\\" as \\"p\\" on \\"e\\".\\"price_asset_uid\\" = \\"p\\".\\"uid\\" group by e.candle_time, e.amount_asset_uid, e.price_asset_uid, e.sender_uid"`;

exports[`candles daemon sql test insert or update array of candles 1`] = `"insert into \\"candles\\" as \\"t\\" (\\"amount_asset_uid\\", \\"close\\", \\"high\\", \\"interval_in_secs\\", \\"low\\", \\"matcher_uid\\", \\"max_height\\", \\"open\\", \\"price_asset_uid\\", \\"quote_volume\\", \\"time_start\\", \\"txs_count\\", \\"volume\\", \\"weighted_average_price\\") values (DEFAULT, '80', '100', 60, '1', DEFAULT, DEFAULT, '20', DEFAULT, '100.2', '1970-01-01 03:00:00.000', '22', '200.2', '2.1') on conflict (time_start, amount_asset_uid, price_asset_uid, matcher_uid, interval_in_secs) do update set open=EXCLUDED.open, close=EXCLUDED.close, low=EXCLUDED.low, high=EXCLUDED.high, max_height=EXCLUDED.max_height, quote_volume=EXCLUDED.quote_volume, txs_count=EXCLUDED.txs_count, volume=EXCLUDED.volume, weighted_average_price=EXCLUDED.weighted_average_price"`;

exports[`candles daemon sql test insert or update candles empty 1`] = `";"`;

exports[`candles daemon sql test insert or update candles from height 1`] = `"insert into \\"candles\\" select to_timestamp(floor((extract('epoch' from time_start) / 300 )) * 300) as \\"candle_time\\", \\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"price_asset_uid\\" as \\"price_asset_uid\\", (select min(\\"low\\")) as \\"low\\", (select max(\\"high\\")) as \\"high\\", (select sum(\\"volume\\")) as \\"volume\\", (select sum(\\"quote_volume\\")) as \\"quote_volume\\", (select max(\\"max_height\\")) as \\"max_height\\", (select sum(\\"txs_count\\")) as \\"txs_count\\", (sum((weighted_average_price * volume)::numeric)::numeric / sum(volume)::numeric)::numeric as \\"weighted_average_price\\", (array_agg(open ORDER BY time_start)::numeric[])[1] as \\"open\\", (array_agg(close ORDER BY time_start DESC)::numeric[])[1] as \\"close\\", 300 as \\"interval_in_secs\\", \\"matcher_uid\\" as \\"matcher_uid\\" from \\"candles\\" where \\"interval_in_secs\\" = 60 and time_start >= to_timestamp(floor(extract('epoch' from '2019-01-01T00:00:00.000Z'::timestamp) / 300) * 300) group by \\"candle_time\\", \\"amount_asset_uid\\", \\"price_asset_uid\\", \\"matcher_uid\\" on conflict (time_start, amount_asset_uid, price_asset_uid, matcher_uid, interval_in_secs) do update set open=EXCLUDED.open, close=EXCLUDED.close, low=EXCLUDED.low, high=EXCLUDED.high, max_height=EXCLUDED.max_height, quote_volume=EXCLUDED.quote_volume, txs_count=EXCLUDED.txs_count, volume=EXCLUDED.volume, weighted_average_price=EXCLUDED.weighted_average_price"`;

exports[`candles daemon sql test truncate table 1`] = `"truncate \\"candles\\" restart identity"`;
